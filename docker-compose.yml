version: '3.9'

services:
    # scheduler & monitoring service
    airflow-webserver:
        hostname: myairflow
        container_name: airflow_container
        image: 'puckel/docker-airflow:1.10.9'  # latest image as of 2021-11-08.
        ports:
            - '8085:8080'
        networks:
            - tfm-network
        volumes:
            - ./data/airflow:/usr/local/airflow/data
            - ./logs/airflow:/usr/local/airflow/logs
            - ./dockerfiles/airflow/dags:/usr/local/airflow/dags
            - ./dockerfiles/airflow/requirements/requirements.txt:/requirements.txt
        restart: on-failure
        healthcheck:
            test: ["CMD", "curl", "-f", "http://myairflow:8080/admin/"]
            interval: 30s
            timeout: 20s
            retries: 3
    # configuration manager for NiFi
    zookeeper:
        hostname: myzookeeper
        container_name: zookeeper_container
        image: 'bitnami/zookeeper:3.7.0'  # latest image as of 2021-11-08.
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        networks:
            - tfm-network
        restart: always

    # data extraction, transformation and load service
    nifi:
        hostname: mynifi
        container_name: nifi_container
        image: 'apache/nifi:1.14.0'  # latest image as of 2021-11-08.
        ports:
            - '8091:8080'
        networks:
            - tfm-network
        volumes:
            - nifi-database_repository:/opt/nifi/nifi-current/database_repository
            - nifi-flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
            - nifi-content_repository:/opt/nifi/nifi-current/content_repository
            - nifi-provenance_repository:/opt/nifi/nifi-current/provenance_repository
            - nifi-conf:/opt/nifi/nifi-current/conf
            - nifi-state:/opt/nifi/nifi-current/state
            - ./logs/nifi:/opt/nifi/nifi-current/logs
            - ./dockerfiles/nifi/jdbc:/opt/nifi/nifi-current/jdbc
            - ./dockerfiles/nifi/credentials:/opt/nifi/nifi-current/credentials
        environment:
            - NIFI_WEB_HTTP_PORT=8080
            - NIFI_CLUSTER_IS_NODE=true
            - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
            - NIFI_ZK_CONNECT_STRING=myzookeeper:2181
            - NIFI_ELECTION_MAX_WAIT=30 sec
            - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
        restart: on-failure
        healthcheck:
            test: ["CMD", "curl", "-f", "http://mynifi:8080/nifi/"]
            interval: 30s
            timeout: 20s
            retries: 3

    # version control for nifi flows
    registry:
        hostname: myregistry
        container_name: registry_container
        image: 'apache/nifi-registry:1.23.0'
        restart: on-failure
        ports:
            - "18080:18080"
        environment:
            - LOG_LEVEL=INFO
            - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
            - NIFI_REGISTRY_FLOW_PROVIDER=file
            - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
        volumes:
            - ./data/nifiregistry/database:/opt/nifi-registry/nifi-registry-current/database
            - ./data/nifiregistry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
            - ./logs/nifiregistry:/opt/nifi-registry/nifi-registry-current/logs
        networks:
            - tfm-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://myregistry:18080/nifi-registry/"]
            interval: 30s
            timeout: 20s
            retries: 3

    superset:
        image: tylerfowler/superset
        container_name: superset
        restart: always
        environment:
            MAPBOX_API_KEY: ${MAPBOX_API_KEY}
        ports:
            - "8088:8088"

    # relational database
    postgres:
        hostname: mypostgres
        container_name: postgres_container
        image: 'postgres:14-bullseye'  # latest image as of 2021-11-08
        environment:
            POSTGRES_USER: 'postgres'
            POSTGRES_PASSWORD: 'postgres'
            PGDATA: /data/postgres
        volumes:
            - ./data/postgres:/data/postgres
        ports:
            - "5432:5432"
        networks:
            - tfm-network
        restart: on-failure
        healthcheck:
            test: ["CMD", "pg_isready"]
            interval: 30s
            timeout: 20s
            retries: 3
    # database administration tool
    pgadmin:
        hostname: mypgadmin
        container_name: pgadmin_container
        image: 'dpage/pgadmin4:7.6'
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
            PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_CONFIG_SERVER_MODE}
        volumes:
            - ./data/pgadmin:/var/lib/pgadmin
        ports:
            - "5050:80"
        networks:
            - tfm-network
        restart: on-failure
        healthcheck:
            test: ["CMD", "curl", "-f", "http://mypgadmin:80/misc/ping"]
            interval: 30s
            timeout: 20s
            retries: 3

    # object storage
    minio:
        hostname: myminio
        container_name: minio_container
        image: 'bitnami/minio:2023'
        environment:
            MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
            MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
        ports:
            - '9000:9000'
            - '9001:9001'
        volumes:
            - './data/minio:/data'
        networks:
            - tfm-network
        healthcheck:
            test: ["CMD", "curl", "-f", "http://myminio:9000/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3
 
networks:
  tfm-network:
    name: tfm-network
    
volumes:
    airflow-data:
    nifi-database_repository:
    nifi-flowfile_repository:
    nifi-content_repository:
    nifi-provenance_repository:
    nifi-state:
    nifi-conf:
